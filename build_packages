#!/bin/bash

# make bash behave
set -euo pipefail
IFS=$'\n\t'

topdir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
packagesdir=${topdir}/packages
buildfilesdir=${topdir}/buildfiles
badusage=64

if [ "$#" -lt 2 ]; then
    echo "$0: project and build type required" >&2
    exit $badusage
fi

project=$1
buildtype=$2

name=$(git config --get user.name)
email=$(git config --get user.email)
packager="${name} <${email}>"

mkdir -p "${packagesdir}"

for format in deb rpm pgxn; do
    buildfilessubdir="${buildfilesdir}/${format}"
    mkdir -p "${buildfilessubdir}"
    "${topdir}/fetch_build_files" "${project}" "${format}" "${buildfilessubdir}"
done

nprocs="${3:-1}"

declare args

while read -r line; do
    IFS=',' read -r os release <<< "$line"

    if [ -z "${release}" ]; then
        outputdir="${packagesdir}/${os}"
    else
        outputdir="${packagesdir}/${os}-${release}"
    fi

    mkdir -p "${outputdir}"

    if [[ "${os}" = 'debian' ]] || [[ "${os}" = 'ubuntu' ]]; then
        if [[ "${os}" = 'debian' ]] && [[ "${release}" = 'jessie' ]]; then
            # Debian Jessie doesn't have pg13 packages yet
            # so we dont't have package builder docker image yet.
            # So skip building distro package for it.
            continue
        fi

        # FIXME: These are built from the contents of 'postgres-matrix.yml' using a Python script in the tools repo
        echo "releasepg=14,15" > ${buildfilesdir}/deb/supported-postgres
        echo "nightlypg=14,15" >> ${buildfilesdir}/deb/supported-postgres

        args+="run --rm -v ${outputdir}:/packages -v ${buildfilesdir}/deb:/buildfiles:ro "
        args+="-e CONTAINER_BUILD_RUN_ENABLED=true "
        args+="-e GITHUB_TOKEN=${GITHUB_TOKEN} -e DEBFULLNAME='${name}' -e DEBEMAIL='${email}' "
        args+="citus/packaging:${os}-${release}-all $buildtype\n"
    elif [[ "${os}" = 'centos' ]] || [[ "${os}" = 'fedora' ]] || [[ "${os}" = 'oraclelinux' ]] || [[ "${os}" = 'almalinux' ]]; then
        # shellcheck source=/dev/null
        source "${buildfilesdir}/rpm/pkgvars"
        releasepg="${releasepg:-11,12,13}"
        nightlypg="${nightlypg:-${releasepg}}"

        if [ "${buildtype}" == 'release' ]; then
            pgversions="${releasepg}"
        else
            pgversions="${nightlypg}"
        fi

        # redhat variants need to build each PostgreSQL version separately
        IFS=','
        for pgversion in ${pgversions}; do
            if { [[ "${os}" = 'centos' ]] || [[ "${os}" = 'oraclelinux' ]]; } && \
                 [[ "${release}" = '6' ]] && [[ "${pgversion}" = '13' ]]; then
                # CentOS and OracleLinux 6 doesn't have pg13 packages yet
                # so we dont't have package builder docker images yet.
                # So skip building distro packages for them.
                continue
            fi
            pgshort=${pgversion//./}
            args+="run --rm -v ${outputdir}:/packages -v ${buildfilesdir}/rpm:/buildfiles:ro "
            args+="-e CONTAINER_BUILD_RUN_ENABLED=true "
            args+="-e GITHUB_TOKEN=${GITHUB_TOKEN} -e RPM_PACKAGER='${packager}' "
            args+="citus/packaging:${os}-${release}-pg${pgshort} $buildtype\n"
        done
    elif [[ "${os}" = 'pgxn' ]]; then
        if [[ "${project}" = 'citus' ]] && [[ "${buildtype}" = 'release' ]]; then
            args+="run --rm -v ${outputdir}:/packages -v ${buildfilesdir}/pgxn:/buildfiles:ro "
            args+="-e CONTAINER_BUILD_RUN_ENABLED=true "
            args+="-e GITHUB_TOKEN=${GITHUB_TOKEN} citus/packaging:${os}-all $buildtype\n"
        else
            echo "skipping PGXN... unsupported for this build" >&2
        fi
    else
        echo "$0: unrecognized OS -- ${os}" >&2
        exit $badusage
    fi
done <"${topdir}/os-list.csv"

echo -e "${args}" | xargs -t -L1 -P "${nprocs}" docker

rm -r "${buildfilesdir:?}"/*
